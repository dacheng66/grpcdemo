// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpcdemo.proto

package grpcdemo

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Point struct {
	Latitude             int32    `protobuf:"varint,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            int32    `protobuf:"varint,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fbeaf5fd8369486, []int{0}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetLatitude() int32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Point) GetLongitude() int32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type Feature struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Location             *Point   `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Feature) Reset()         { *m = Feature{} }
func (m *Feature) String() string { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()    {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fbeaf5fd8369486, []int{1}
}

func (m *Feature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feature.Unmarshal(m, b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
}
func (m *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(m, src)
}
func (m *Feature) XXX_Size() int {
	return xxx_messageInfo_Feature.Size(m)
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feature) GetLocation() *Point {
	if m != nil {
		return m.Location
	}
	return nil
}

type Rectangle struct {
	Lo                   *Point   `protobuf:"bytes,1,opt,name=lo,proto3" json:"lo,omitempty"`
	Hi                   *Point   `protobuf:"bytes,2,opt,name=hi,proto3" json:"hi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rectangle) Reset()         { *m = Rectangle{} }
func (m *Rectangle) String() string { return proto.CompactTextString(m) }
func (*Rectangle) ProtoMessage()    {}
func (*Rectangle) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fbeaf5fd8369486, []int{2}
}

func (m *Rectangle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rectangle.Unmarshal(m, b)
}
func (m *Rectangle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rectangle.Marshal(b, m, deterministic)
}
func (m *Rectangle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rectangle.Merge(m, src)
}
func (m *Rectangle) XXX_Size() int {
	return xxx_messageInfo_Rectangle.Size(m)
}
func (m *Rectangle) XXX_DiscardUnknown() {
	xxx_messageInfo_Rectangle.DiscardUnknown(m)
}

var xxx_messageInfo_Rectangle proto.InternalMessageInfo

func (m *Rectangle) GetLo() *Point {
	if m != nil {
		return m.Lo
	}
	return nil
}

func (m *Rectangle) GetHi() *Point {
	if m != nil {
		return m.Hi
	}
	return nil
}

type RouteNote struct {
	Location             *Point   `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteNote) Reset()         { *m = RouteNote{} }
func (m *RouteNote) String() string { return proto.CompactTextString(m) }
func (*RouteNote) ProtoMessage()    {}
func (*RouteNote) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fbeaf5fd8369486, []int{3}
}

func (m *RouteNote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteNote.Unmarshal(m, b)
}
func (m *RouteNote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteNote.Marshal(b, m, deterministic)
}
func (m *RouteNote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteNote.Merge(m, src)
}
func (m *RouteNote) XXX_Size() int {
	return xxx_messageInfo_RouteNote.Size(m)
}
func (m *RouteNote) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteNote.DiscardUnknown(m)
}

var xxx_messageInfo_RouteNote proto.InternalMessageInfo

func (m *RouteNote) GetLocation() *Point {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *RouteNote) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RouteSummary struct {
	PointCount           int32    `protobuf:"varint,1,opt,name=point_count,json=pointCount,proto3" json:"point_count,omitempty"`
	FeatureCount         int32    `protobuf:"varint,2,opt,name=feature_count,json=featureCount,proto3" json:"feature_count,omitempty"`
	Distance             int32    `protobuf:"varint,3,opt,name=distance,proto3" json:"distance,omitempty"`
	ElapsedTime          int32    `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteSummary) Reset()         { *m = RouteSummary{} }
func (m *RouteSummary) String() string { return proto.CompactTextString(m) }
func (*RouteSummary) ProtoMessage()    {}
func (*RouteSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fbeaf5fd8369486, []int{4}
}

func (m *RouteSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteSummary.Unmarshal(m, b)
}
func (m *RouteSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteSummary.Marshal(b, m, deterministic)
}
func (m *RouteSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteSummary.Merge(m, src)
}
func (m *RouteSummary) XXX_Size() int {
	return xxx_messageInfo_RouteSummary.Size(m)
}
func (m *RouteSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteSummary.DiscardUnknown(m)
}

var xxx_messageInfo_RouteSummary proto.InternalMessageInfo

func (m *RouteSummary) GetPointCount() int32 {
	if m != nil {
		return m.PointCount
	}
	return 0
}

func (m *RouteSummary) GetFeatureCount() int32 {
	if m != nil {
		return m.FeatureCount
	}
	return 0
}

func (m *RouteSummary) GetDistance() int32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *RouteSummary) GetElapsedTime() int32 {
	if m != nil {
		return m.ElapsedTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Point)(nil), "grpcdemo.Point")
	proto.RegisterType((*Feature)(nil), "grpcdemo.Feature")
	proto.RegisterType((*Rectangle)(nil), "grpcdemo.Rectangle")
	proto.RegisterType((*RouteNote)(nil), "grpcdemo.RouteNote")
	proto.RegisterType((*RouteSummary)(nil), "grpcdemo.RouteSummary")
}

func init() { proto.RegisterFile("grpcdemo.proto", fileDescriptor_9fbeaf5fd8369486) }

var fileDescriptor_9fbeaf5fd8369486 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x6f, 0xd4, 0x30,
	0x10, 0xad, 0x97, 0x96, 0x26, 0xb3, 0x5b, 0x10, 0x83, 0x84, 0x56, 0xab, 0x4a, 0x85, 0x70, 0xa9,
	0x84, 0x08, 0xd5, 0x72, 0x2b, 0x27, 0x5a, 0x44, 0x25, 0x04, 0x68, 0x65, 0xb8, 0x57, 0xc6, 0x19,
	0x12, 0x4b, 0xb1, 0x27, 0x4a, 0x9c, 0x43, 0x7f, 0x07, 0x3f, 0x95, 0x3f, 0x80, 0xe2, 0x7c, 0x6c,
	0x0b, 0x8b, 0x7a, 0xcb, 0xbc, 0x79, 0xef, 0xcd, 0xe4, 0x8d, 0xe1, 0x51, 0x5e, 0x57, 0x3a, 0x23,
	0xcb, 0x69, 0x55, 0xb3, 0x67, 0x8c, 0xc6, 0x3a, 0x79, 0x0f, 0x07, 0x1b, 0x36, 0xce, 0xe3, 0x0a,
	0xa2, 0x52, 0x79, 0xe3, 0xdb, 0x8c, 0x96, 0xe2, 0xb9, 0x38, 0x3d, 0x90, 0x53, 0x8d, 0xc7, 0x10,
	0x97, 0xec, 0xf2, 0xbe, 0x39, 0x0b, 0xcd, 0x2d, 0x90, 0x7c, 0x82, 0xc3, 0x8f, 0xa4, 0x7c, 0x5b,
	0x13, 0x22, 0xec, 0x3b, 0x65, 0x7b, 0x83, 0x58, 0x86, 0x6f, 0x7c, 0x05, 0x51, 0xc9, 0x5a, 0x79,
	0xc3, 0x2e, 0x68, 0xe7, 0xeb, 0xc7, 0xe9, 0xb4, 0x4e, 0x98, 0x2d, 0x27, 0x42, 0xf2, 0x05, 0x62,
	0x49, 0xda, 0x2b, 0x97, 0x97, 0x84, 0x27, 0x30, 0x2b, 0x39, 0x78, 0xed, 0xd0, 0xcc, 0x4a, 0xee,
	0x08, 0x85, 0xf9, 0x9f, 0xe9, 0xac, 0x30, 0x89, 0x84, 0x58, 0x72, 0xeb, 0xe9, 0x2b, 0xfb, 0xbb,
	0x8b, 0x88, 0x7b, 0x16, 0xc1, 0x25, 0x1c, 0x5a, 0x6a, 0x1a, 0x95, 0xf7, 0x3f, 0x1c, 0xcb, 0xb1,
	0x4c, 0x7e, 0x09, 0x58, 0x04, 0xd3, 0x6f, 0xad, 0xb5, 0xaa, 0xbe, 0xc1, 0x13, 0x98, 0x57, 0x9d,
	0xfa, 0x5a, 0x73, 0xeb, 0xfc, 0x10, 0x1e, 0x04, 0xe8, 0xb2, 0x43, 0xf0, 0x25, 0x1c, 0xfd, 0xec,
	0x03, 0x1a, 0x28, 0x7d, 0x84, 0x8b, 0x01, 0xec, 0x49, 0x2b, 0x88, 0x32, 0xd3, 0x78, 0xe5, 0x34,
	0x2d, 0x1f, 0xf4, 0xf9, 0x8f, 0x35, 0xbe, 0x80, 0x05, 0x95, 0xaa, 0x6a, 0x28, 0xbb, 0xf6, 0xc6,
	0xd2, 0x72, 0x3f, 0xf4, 0xe7, 0x03, 0xf6, 0xdd, 0x58, 0x5a, 0xff, 0x16, 0x10, 0x5d, 0xd5, 0x95,
	0xfe, 0x40, 0x96, 0x71, 0x0d, 0x70, 0x45, 0x7e, 0x3c, 0xca, 0xdf, 0x7f, 0xb9, 0x7a, 0xb2, 0x05,
	0x06, 0x4e, 0xb2, 0x87, 0xe7, 0xb0, 0xf8, 0x6c, 0x9a, 0x51, 0xd4, 0xe0, 0xd3, 0x2d, 0x69, 0xba,
	0xc8, 0x4e, 0xe5, 0x99, 0xc0, 0x73, 0x98, 0x4b, 0xd2, 0x5c, 0x67, 0x21, 0x97, 0x7f, 0x07, 0x3e,
	0xbb, 0xe5, 0x75, 0x2b, 0xb9, 0x64, 0xef, 0x54, 0xe0, 0xbb, 0xe1, 0x44, 0x97, 0x85, 0xf2, 0x77,
	0x86, 0x8e, 0x77, 0x5b, 0xed, 0x02, 0x3b, 0xe9, 0x99, 0xb8, 0x78, 0x03, 0xc7, 0x9a, 0x6d, 0x5a,
	0xb4, 0xea, 0xa6, 0x55, 0xee, 0xb5, 0x61, 0x9f, 0x16, 0x56, 0x4f, 0xfc, 0x8b, 0xa3, 0x31, 0x92,
	0x4d, 0xf7, 0xec, 0x37, 0xe2, 0xc7, 0xc3, 0xf0, 0xfe, 0xdf, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff,
	0x95, 0x11, 0xdc, 0x63, 0x11, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GrpcDemoClient is the client API for GrpcDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcDemoClient interface {
	//简单 RPC
	GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error)
	//服务器端流式 RPC,客户端发送请求到服务器，
	//客户端读取返回的流，直到里面没有任何消息。
	ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (GrpcDemo_ListFeaturesClient, error)
	//一个 客户端流式 RPC , 客户端写入一个消息序列并将其发送到服务器
	//一旦客户端完成写入消息，它等待服务器完成读取返回它的响应。
	RecordRoute(ctx context.Context, opts ...grpc.CallOption) (GrpcDemo_RecordRouteClient, error)
	//双向流式 RPC
	//服务器可以在写入响应前等待接收所有的客户端消息
	//或者可以交替的读取和写入消息，或者其他读写的组合。
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (GrpcDemo_RouteChatClient, error)
}

type grpcDemoClient struct {
	cc *grpc.ClientConn
}

func NewGrpcDemoClient(cc *grpc.ClientConn) GrpcDemoClient {
	return &grpcDemoClient{cc}
}

func (c *grpcDemoClient) GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/grpcdemo.GrpcDemo/GetFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcDemoClient) ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (GrpcDemo_ListFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcDemo_serviceDesc.Streams[0], "/grpcdemo.GrpcDemo/ListFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcDemoListFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcDemo_ListFeaturesClient interface {
	Recv() (*Feature, error)
	grpc.ClientStream
}

type grpcDemoListFeaturesClient struct {
	grpc.ClientStream
}

func (x *grpcDemoListFeaturesClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcDemoClient) RecordRoute(ctx context.Context, opts ...grpc.CallOption) (GrpcDemo_RecordRouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcDemo_serviceDesc.Streams[1], "/grpcdemo.GrpcDemo/RecordRoute", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcDemoRecordRouteClient{stream}
	return x, nil
}

type GrpcDemo_RecordRouteClient interface {
	Send(*Point) error
	CloseAndRecv() (*RouteSummary, error)
	grpc.ClientStream
}

type grpcDemoRecordRouteClient struct {
	grpc.ClientStream
}

func (x *grpcDemoRecordRouteClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcDemoRecordRouteClient) CloseAndRecv() (*RouteSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RouteSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcDemoClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (GrpcDemo_RouteChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcDemo_serviceDesc.Streams[2], "/grpcdemo.GrpcDemo/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcDemoRouteChatClient{stream}
	return x, nil
}

type GrpcDemo_RouteChatClient interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ClientStream
}

type grpcDemoRouteChatClient struct {
	grpc.ClientStream
}

func (x *grpcDemoRouteChatClient) Send(m *RouteNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcDemoRouteChatClient) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcDemoServer is the server API for GrpcDemo service.
type GrpcDemoServer interface {
	//简单 RPC
	GetFeature(context.Context, *Point) (*Feature, error)
	//服务器端流式 RPC,客户端发送请求到服务器，
	//客户端读取返回的流，直到里面没有任何消息。
	ListFeatures(*Rectangle, GrpcDemo_ListFeaturesServer) error
	//一个 客户端流式 RPC , 客户端写入一个消息序列并将其发送到服务器
	//一旦客户端完成写入消息，它等待服务器完成读取返回它的响应。
	RecordRoute(GrpcDemo_RecordRouteServer) error
	//双向流式 RPC
	//服务器可以在写入响应前等待接收所有的客户端消息
	//或者可以交替的读取和写入消息，或者其他读写的组合。
	RouteChat(GrpcDemo_RouteChatServer) error
}

func RegisterGrpcDemoServer(s *grpc.Server, srv GrpcDemoServer) {
	s.RegisterService(&_GrpcDemo_serviceDesc, srv)
}

func _GrpcDemo_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcDemoServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdemo.GrpcDemo/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcDemoServer).GetFeature(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcDemo_ListFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Rectangle)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcDemoServer).ListFeatures(m, &grpcDemoListFeaturesServer{stream})
}

type GrpcDemo_ListFeaturesServer interface {
	Send(*Feature) error
	grpc.ServerStream
}

type grpcDemoListFeaturesServer struct {
	grpc.ServerStream
}

func (x *grpcDemoListFeaturesServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcDemo_RecordRoute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcDemoServer).RecordRoute(&grpcDemoRecordRouteServer{stream})
}

type GrpcDemo_RecordRouteServer interface {
	SendAndClose(*RouteSummary) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type grpcDemoRecordRouteServer struct {
	grpc.ServerStream
}

func (x *grpcDemoRecordRouteServer) SendAndClose(m *RouteSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcDemoRecordRouteServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcDemo_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcDemoServer).RouteChat(&grpcDemoRouteChatServer{stream})
}

type GrpcDemo_RouteChatServer interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ServerStream
}

type grpcDemoRouteChatServer struct {
	grpc.ServerStream
}

func (x *grpcDemoRouteChatServer) Send(m *RouteNote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcDemoRouteChatServer) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GrpcDemo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcdemo.GrpcDemo",
	HandlerType: (*GrpcDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeature",
			Handler:    _GrpcDemo_GetFeature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFeatures",
			Handler:       _GrpcDemo_ListFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordRoute",
			Handler:       _GrpcDemo_RecordRoute_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RouteChat",
			Handler:       _GrpcDemo_RouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpcdemo.proto",
}
